version: '3.9'
services:
  backend:
    build:
      context: ./services/backend
      dockerfile: Dockerfile.dev
    volumes:
      - './services/backend:/workspace/app'
    depends_on:
      db:
        condition: service_healthy
    ports:
      - '${BACKEND_PORT}:${BACKEND_PORT}'
    stdin_open: true
    tty: true
    command: /workspace/entrypoint-dev.sh

  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile.dev
    volumes:
      - './services/frontend:/workspace/app'
      # One-way volume to use node_modules from inside image
      # NOTE:
      #   this can cause docker out of memory issues
      #   this also causes the frontend to be very slow even if you run the frontend locally not in docker
      # - '/workspace/app/node_modules'
    ports:
      - '${FRONTEND_PORT}:${FRONTEND_PORT}'
    command: npm run start
    # command: sleep infinity

  db:
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    volumes:
      - '${PGDBLOCAL}:/var/lib/postgresql/data/'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -p 5432 -q -U ${POSTGRES_USER}']
      interval: 3s
      timeout: 2s
      retries: 7

  celery-beat-worker:
    build:
      context: ./services/backend
      dockerfile: Dockerfile.dev
    volumes:
      - './services/backend:/workspace/app'
    environment:
      MINT_WORKER_TYPE: '${BEAT_MINT_WORKER_TYPE}'
      MINT_WORKER_OPTIONS: '${BEAT_MINT_WORKER_OPTIONS}'
      CELERY_WORKER_QUEUES: '${BEAT_CELERY_WORKER_QUEUES}'
    command: python3 manage.py autoreload_celery --mint_worker_options "${BEAT_MINT_WORKER_OPTIONS}" --mint_worker_type "${BEAT_MINT_WORKER_TYPE}" --celery_worker_queues "${BEAT_CELERY_WORKER_QUEUES}"
    # NOTE: Use below if the above 'autoreload_celery' command is not found; hotreloading will not work with the below so you need to restart the container for changes to take effect
    # command: /workspace/entrypoint-dev.sh

  celery-data-worker:
    build:
      context: ./services/backend
      dockerfile: Dockerfile.dev
    volumes:
      - './services/backend:/workspace/app'
    environment:
      MINT_WORKER_TYPE: '${DATA_MINT_WORKER_TYPE}'
      CELERY_WORKER_QUEUES: '${DATA_CELERY_WORKER_QUEUES}'
    command: python3 manage.py autoreload_celery --mint_worker_type "${DATA_MINT_WORKER_TYPE}" --celery_worker_queues "${DATA_CELERY_WORKER_QUEUES}"
    # NOTE: Use below if the above 'autoreload_celery' command is not found; hotreloading will not work with the below so you need to restart the container for changes to take effect
    # command: /workspace/entrypoint-dev.sh

  mq:
    volumes:
      - '/tmp/django-react-mq/data/mq:/var/lib/rabbitmq'
